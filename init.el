
;;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

                                        ;Packages
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
(package-initialize)

;;-------------------------------------
;;NOTE: Auto complete is a bit annoying...
;;and that's why it's gone ;)

;; (require 'auto-complete)
;; (require 'auto-complete-config)
;; (ac-config-default)
;; 					;AutoComplete
;; (setq ac-auto-show-menu nil)
;; (setq ac-use-quick-help nil)

;;NOTE: This is the autocomplete that I'm looking for:
;;(global-set-key (kbd "S-<tab>") 'dabbrev-expand)
(setq my_name "Michael")

					;Startup

(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
(setq toggle-scroll-bar t)
					;(setq next-line-add-newlines nil) ;not sure what these do
					;(setq-default truncate-lines t)
					;(setq truncate-partial-width-windows nil)
(toggle-frame-maximized)
(split-window-horizontally)
(scroll-bar-mode -1)
(setq ring-bell-function 'ignore)
(delete-selection-mode 1)
(tool-bar-mode -1)
(setq-default hl-line-sticky-flag nil)
(global-hl-line-mode 1)
(electric-pair-mode 1)
					;Format C-Mode and C++-Mode

(setq c-default-style "ellemtel")


;;Generated by emacs |+++++++++++++++++++++++++++++++|

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote (tango-dark)))
 '(package-selected-packages
   (quote
    (magit atomic-chrome projectile iedit helm diminish company bind-key))))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "#282C2E" :foreground "#F5DEB3" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 98 :width normal :foundry "outline" :family "Courier New"))))
 '(cursor ((t (:background "green1"))))
 '(font-lock-comment-face ((t (:foreground "gray50"))))
 '(font-lock-constant-face ((t (:foreground "indian red"))))
 '(font-lock-function-name-face ((t (:foreground "#A2793B"))))
 '(font-lock-keyword-face ((t (:foreground "#4DB9EF"))))
 '(font-lock-string-face ((t (:foreground "DarkOliveGreen3"))))
 '(font-lock-type-face ((t (:foreground "#CAB048"))))
 '(font-lock-variable-name-face ((t (:foreground "#F0E7B7"))))
 '(highlight ((t (:background "RoyalBlue4"))))
 '(hl-line ((t (:background "black"))))
 '(mode-line ((t (:background "dark slate blue" :foreground "#eeeeec")))))

;;UNTIL HERE |+++++++++++++++++++++++++++++++++|
					;Key Bindings

(global-set-key (kbd "C-o") 'other-window)
(global-set-key [f4] 'kill-buffer)
(global-set-key (kbd "C-x C-b") 'buffer-menu-other-window)
(defun my:switch-c-source-files ()
  (local-set-key (kbd "C-x C-i") 'ff-find-other-file)
  (local-set-key (kbd "<tab>") 'dabbrev-expand)
  (local-set-key (kbd "S-<tab>") 'indent-for-tab-command))
(add-hook 'c-mode-common-hook 'my:switch-c-source-files)
(add-hook 'c++-mode-common-hook 'my:switch-c-source-files)

;;NOTE:EXPIREMENTAL:-COPY,-PASTE,-CUT | Not sure what key should be what
(global-set-key (kbd "C-q") 'kill-ring-save)
(global-set-key (kbd "C-z") 'yank)


					;Compile

(define-key input-decode-map [?\C-m] [C-m]) ;;Stops C-m from acting as RET
(setq compile-command "build")
(setq compilation-ask-about-save nil)
(setq compilation-read-command nil)

(global-set-key (kbd "<C-m>") 'compile)


;;|===========================| My Functions |===========================|

					;# FORMATING #

;;Colors specific words in text
(setq todo-modes '(text-mode c++-mode c-mode emacs-lisp-mode))
(make-face 'my_todo_face)
(make-face 'my_note_face)
(make-face 'my_warning_face)
(mapc (lambda (mode)
	(font-lock-add-keywords
	 mode
	 '(("\\<\\(TODO\\)" 1 'my_todo_face t)
	   ("\\<\\(NOTE\\)" 1 'my_note_face t)
	   ("\\<\\(WARNING\\)" 1 'my_warning_face t))))
      todo-modes)
(modify-face 'my_todo_face "Red" nil nil t nil t nil nil)
(modify-face 'my_note_face "Dark Green" nil nil t nil t nil nil)
(modify-face 'my_warning_face "Yellow" nil nil t nil t nil nil)


					;# NOT SURE WHAT TO CALL YET #


;;Format the entire buffer
(defun format-buffer ()
  (interactive)
  (save-excursion
    (indent-region (point-min) (point-max) nil)))
(global-set-key [f12] 'format-buffer)

;;Insert a line up
(defun insert-line-up ()
  "Inserts a new line above the current one and moves the cursor there."
  (interactive)
  (beginning-of-line)
  (save-excursion
    (newline))
  (c-indent-line-or-region))
(global-set-key (kbd "<S-return>") 'insert-line-up)

;;Instert a line down
(defun insert-line-down ()
  "Inserts a newline below the current one and moves the cursor there."
  (interactive)
  (end-of-line)
  (newline-and-indent))
(global-set-key (kbd "<C-return>") 'insert-line-down)




					;EDITING
(defun my-delete-word (arg)
  "Delete characters forward until encountering the end of a word.
With argument, do this that many times.
This command does not push text to `kill-ring'."
  (interactive "p")
  (delete-region
   (point)
   (progn
     (forward-word arg)
     (point))))

(defun my-backward-delete-word (arg)
  "Delete characters backward until encountering the beginning of a word.
With argument, do this that many times.
This command does not push text to `kill-ring'."
  (interactive "p")
  (my-delete-word (- arg)))

(defun my-delete-line ()
  "Delete text from current position to end of line char.
This command does not push text to `kill-ring'."
  (interactive)
  (delete-region
   (point)
   (progn (end-of-line 1) (point)))
  (delete-char 1))

(defun my-delete-line-backward ()
  "Delete text between the beginning of the line to the cursor position.
This command does not push text to `kill-ring'."
  (interactive)
  (let (p1 p2)
    (setq p1 (point))
    (beginning-of-line 1)
    (setq p2 (point))
    (delete-region p1 p2)))

;;NOTE:EXPIREMENTAL: Bind them to emacs's default shortcut keys:
;;TODO: Make a single delete line command that will delete the entire line
(global-set-key (kbd "C-S-k") 'my-delete-line-backward)
(global-set-key (kbd "C-k") 'my-delete-line)
;;(global-set-key (kbd "M-d") 'my-delete-word)
(global-set-key (kbd "C-d") 'my-delete-word)
;;(global-set-key (kbd "<M-backspace>") 'my-backward-delete-word)
(global-set-key (kbd "<C-backspace>") 'my-backward-delete-word)



;;Test Functions




(defun what-face (pos)
  (interactive "d")
  (let ((face (or (get-char-property (point) 'read-face-name)
		  (get-char-property (point) 'face))))
    (if face (message "Face: %s" face) (message "No face at %d" pos))))			   
;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

